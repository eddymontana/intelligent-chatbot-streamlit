# -*- coding: utf-8 -*-
"""End to End Chatbot using Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fpHipElc4LpRORIN45veXaKbbJZJERry

A chatbot is a computer program that understands the intent of your query to answer with a solution. Chatbots are the most popular applications of Natural Language Processing in the industry. So, if you want to build an end-to-end chatbot, this article is for you. In this article, I will take you through how to create an end-to-end chatbot using Python.

**What is an End to End Chatbot?**

An end-to-end chatbot refers to a chatbot that can handle a complete conversation from start to finish without requiring human assistance. To create an end-to-end chatbot, you need to write a computer program that can understand user requests, generate appropriate responses, and take action when necessary. This involves collecting data, choosing a programming language and NLP tools, training the chatbot, and testing and refining it before making it available to users.

Once deployed, users can interact with the chatbot by sending it multiple requests and the chatbot can handle the entire conversation itself. To create an end-to-end chatbot using Python, we can follow the steps mentioned below:

1. Define Intents
2. Create training data
3. Train the chatbot
4. Build the chatbot
5. Test the chatbot
6. Deploy the chatbot.

I hope you now have understood what an end-to-end chatbot is and the process of creating an end-to-end chatbot. In the section below, I’ll walk you through how to build an end-to-end chatbot using Python.

**End to End Chatbot using Python**

Now let’s start with creating an end-to-end chatbot using Python. I’ll start this task by importing the necessary Python libraries for this task:

## Initial setup and imports

## Write streamlit app to file

### Subtask:
Use the `%%writefile` magic command to save the Streamlit app code to a Python file.

## Prepare data and train model

### Subtask:
 preprocess the intent data and train the machine learning model.
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import streamlit as st
import os
import nltk
import ssl
import random
import threading
import time
 
ssl._create_default_https_context = ssl._create_unverified_context
nltk.data.path.append(os.path.abspath("nltk_data"))
nltk.download('punkt')

"""## Define intents

"""

# Define intents
intents = [
    {
        "tag": "greeting",
        "patterns": ["Hi", "Hello", "Hey", "How are you", "What's up"],
        "responses": ["Hi there", "Hello", "Hey", "I'm fine, thank you", "Nothing much"]
    },
    {
        "tag": "goodbye",
        "patterns": ["Bye", "See you later", "Goodbye", "Take care"],
        "responses": ["Goodbye", "See you later", "Take care"]
    },
    {
        "tag": "thanks",
        "patterns": ["Thank you", "Thanks", "Thanks a lot", "I appreciate it"],
        "responses": ["You're welcome", "No problem", "Glad I could help"]
    },
    {
        "tag": "about",
        "patterns": ["What can you do", "Who are you", "What are you", "What is your purpose"],
        "responses": ["I am a chatbot", "My purpose is to assist you", "I can answer questions and provide assistance"]
    },
    {
        "tag": "help",
        "patterns": ["Help", "I need help", "Can you help me", "What should I do"],
        "responses": ["Sure, what do you need help with?", "I'm here to help. What's the problem?", "How can I assist you?"]
    },
    {
        "tag": "age",
        "patterns": ["How old are you", "What's your age"],
        "responses": ["I don't have an age. I'm a chatbot.", "I was just born in the digital world.", "Age is just a number for me."]
    },
    {
        "tag": "weather",
        "patterns": ["What's the weather like", "How's the weather today"],
        "responses": ["I'm sorry, I cannot provide real-time weather information.", "You can check the weather on a weather app or website."]
    },
    {
        "tag": "budget",
        "patterns": ["How can I make a budget", "What's a good budgeting strategy", "How do I create a budget"],
        "responses": ["To make a budget, start by tracking your income and expenses. Then, allocate your income towards essential expenses like rent, food, and bills. Next, allocate some of your income towards savings and debt repayment. Finally, allocate the remainder of your income towards discretionary expenses like entertainment and hobbies.", "A good budgeting strategy is to use the 50/30/20 rule. This means allocating 50% of your income towards essential expenses, 30% towards discretionary expenses, and 20% towards savings and debt repayment.", "To create a budget, start by setting financial goals for yourself. Then, track your income and expenses for a few months to get a sense of where your money is going. Next, create a budget by allocating your income towards essential expenses, savings and debt repayment, and discretionary expenses."]
    },
    {
        "tag": "credit_score",
        "patterns": ["What is a credit score", "How do I check my credit score", "How can I improve my credit score"],
        "responses": ["A credit score is a number that represents your creditworthiness. It is based on your credit history and is used by lenders to determine whether or not to lend you money. The higher your credit score, the more likely you are to be approved for credit.", "You can check your credit score for free on several websites such as Credit Karma and Credit Sesame."]
    }
]

"""Now let's prepare the intents and train a Machine Learning model for the chatbot."""
# Create the vectorizer and classifier
vectorizer = TfidfVectorizer()
clf = LogisticRegression(random_state=0, max_iter=10000)

# Preprocess the data
tags = []
patterns = []
for intent in intents:
    for pattern in intent['patterns']:
        tags.append(intent['tag'])
        patterns.append(pattern)

# training the model
x = vectorizer.fit_transform(patterns)
y = tags
clf.fit(x, y)

"""Now let's write a Python function to chat with the chatbot:"""

def chatbot(input_text):
    input_text = vectorizer.transform([input_text])
    tag = clf.predict(input_text)[0]
    for intent in intents:
        if intent['tag'] == tag:
            response = random.choice(intent['responses'])
            return response

"""## Define streamlit app code

### Subtask:
 the Streamlit application logic and layout.

"""

# Streamlit layout
counter = 0

def main():
    global counter
    st.title("Chatbot")
    st.write("Welcome to the chatbot. Please type a message and press Enter to start the conversation.")

    # Initialize chat history in session state if it doesn't exist
    if 'history' not in st.session_state:
      st.session_state['history'] = []

    # Display chat history
    for message in st.session_state['history']:
      with st.chat_message(message["role"]):
        st.markdown(message["content"])

    # Get user input
    user_input = st.chat_input("You:")

    if user_input:
      # Add user message to history
      st.session_state['history'].append({"role" : "user", "content" : user_input})
      with st.chat_message("user"):
        st.markdown(user_input)

      # Get chatbot response
      response = chatbot(user_input)

      # Add chatbot response to history
      st.session_state['history'].append({"role" : "assistant", "content" : response})
      with st.chat_message("assistant"):
        st.markdown(response)

      # Optional: End conversation logic (can be handled differently in a chat interface)
      # If response.lower() in  ['goodbye', 'bye', 'see you later', 'take care']:
      #  st.write("thank you for chatting with me. Have a great day!")
      #  st.stop()



if __name__ == '__main__':
    main() # Reset or manage counter within the app for state

"""## Run streamlit app

### Subtask:
Execute the Python file containing the Streamlit app using the `!streamlit run` command.

Execute the Streamlit application file `app.py` using the `!streamlit run` command.

## Create ngrok tunnel

### Subtask:
Create an ngrok tunnel to expose the running Streamlit app to the internet.

Create an ngrok tunnel for port 8501 to expose the running Streamlit application.
"""
